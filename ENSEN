<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ENSEN - 遠征・推し活サポートアプリ</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA1l7sXMfs-h2s6anKKp7JRlucgXx_HBas&libraries=places,geocoding"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;700;800&display=swap');
        body { font-family: 'M PLUS Rounded 1c', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif; }
        .loader-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; background-color: #fdf2f8; text-align: center; }
        .loader { border: 5px solid #f3f4f6; border-top: 5px solid #ec4899; border-radius: 50%; width: 50px; height: 50px; animation: spin 1.2s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .map-container { width: 100%; height: 250px; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        #directions-panel { width: 100%; min-height: 250px; height: auto; max-height: calc(100vh - 650px); overflow-y: auto; background-color: #f9fafb; padding: 0.75rem; border-radius: 0.75rem; }
        .adp-summary, .adp-legal { font-size: 0.875rem; color: #4b5563; }
    </style>
</head>
<body class="bg-pink-50">
    <div id="root">
        <div class="loader-container">
            <div class="loader"></div>
            <p style="margin-top: 1.5rem; color: #4b5563; font-size: 1.1rem;">アプリを起動中...</p>
        </div>
    </div>

    <script type="module">
        // Firebaseサービスのモジュールをインポート
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-auth.js";
        import { getFirestore, collection, doc, setDoc, onSnapshot, addDoc, query, orderBy, serverTimestamp, deleteDoc, getDoc, updateDoc, writeBatch, arrayUnion, arrayRemove } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-firestore.js";
        
        // windowオブジェクトにFirebaseサービスを格納し、他のスクリプトから利用できるようにする
        window.firebase_services = {
            initializeApp, getAuth, onAuthStateChanged, createUserWithEmailAndPassword,
            signInWithEmailAndPassword, signOut, getFirestore, collection, doc,
            setDoc, onSnapshot, addDoc, query, orderBy, serverTimestamp, deleteDoc,
            getDoc, updateDoc, writeBatch, arrayUnion, arrayRemove
        };
        // Firebaseの準備が完了したことを知らせるカスタムイベントを発火
        document.dispatchEvent(new CustomEvent('firebase-ready'));
    </script>

    <script type="text/babel">
        const { useState, useEffect, useRef, Fragment } = React;

        // --- アイコンコンポーネント群 ---
        const HomeIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>;
        const ClipboardListIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" /></svg>;
        const ChatAlt2Icon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a2 2 0 01-2-2V10a2 2 0 012-2h8z" /></svg>;
        const SparklesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6.343 6.343l1.414 1.414m3.536 3.536l1.414 1.414M19 3v4M21 5h-4m-1.657 1.657l-1.414 1.414m-3.536 3.536l-1.414 1.414" /></svg>;
        const InformationCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
        const LogoutIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" /></svg>;
        const ArrowLeftIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>;
        const PlusIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" /></svg>;
        const TrashIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>;
        const DocumentTextIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>;
        const ChatBubbleLeftRightIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72-3.72a1.5 1.5 0 010-2.122l3.72-3.72zM3.75 8.511c-.884.284-1.5 1.128-1.5 2.097v4.286c0 1.136.847 2.1 1.98 2.193l3.72-3.72a1.5 1.5 0 010-2.122L3.75 8.511zM11.25 11.25c0 .621.504 1.125 1.125 1.125h.375c.621 0 1.125-.504 1.125-1.125V9.75c0-.621-.504-1.125-1.125-1.125h-.375A1.125 1.125 0 0011.25 9.75v1.5z" /></svg>;
        const MapIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l6.553 3.276A1 1 0 0021 19.382V8.618a1 1 0 00-.553-.894L15 5m-6 2l6-3m0 0l6 3m-6-3v10" /></svg>;
        const LoginIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" /></svg>;
        const UserAddIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" /></svg>;
        const ExternalLinkIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" /></svg>;
        const CogIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.096 2.572-1.065z" /><path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;

        // --- ユーティリティ関数 ---
        const formatTimestamp = (timestamp) => {
            if (!timestamp || typeof timestamp.toDate !== 'function') { return null; }
            const date = timestamp.toDate();
            const year = date.getFullYear();
            const mm = String(date.getMonth() + 1).padStart(2, '0');
            const dd = String(date.getDate()).padStart(2, '0');
            const hh = String(date.getHours()).padStart(2, '0');
            const min = String(date.getMinutes()).padStart(2, '0');
            return `${year}/${mm}/${dd} ${hh}:${min}`;
        };

        // --- 共通コンポーネント ---
        const ConfirmModal = ({ show, onConfirm, onCancel, message, confirmText = '削除する', cancelText = 'キャンセル' }) => {
            if (!show) return null;
            return (
                <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
                    <div className="bg-white p-6 rounded-xl shadow-xl text-center max-w-sm w-full">
                        <p className="mb-6 text-gray-700">{message}</p>
                        <div className="flex justify-center gap-4">
                            <button onClick={onCancel} className="px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-lg hover:bg-gray-300 transition-colors">{cancelText}</button>
                            <button onClick={onConfirm} className="px-4 py-2 bg-red-500 text-white font-semibold rounded-lg hover:bg-red-600 transition-colors">{confirmText}</button>
                        </div>
                    </div>
                </div>
            );
        };
        
        // --- メインアプリケーションコンポーネント ---
        function App() {
            const HOST_UID = 'mIWeScY0ApVtpZwqxuweVHA8ZWp2'; // 管理者UID
            
            // --- ステート管理 ---
            const [fbServices, setFbServices] = useState(null);
            const [user, setUser] = useState(null);
            const [isAuthReady, setIsAuthReady] = useState(false);
            const [isDataReady, setIsDataReady] = useState(false);
            const [screen, setScreen] = useState('splash');
            const [screenProps, setScreenProps] = useState({});
            const [error, setError] = useState('');
            
            // --- データステート ---
            const [artists, setArtists] = useState([]);
            const [concerts, setConcerts] = useState({});
            const [hotels, setHotels] = useState({});
            const [defaultPackingList, setDefaultPackingList] = useState([]);
            const [mannersGuide, setMannersGuide] = useState(null);

            // --- 副作用フック (Firebase初期化) ---
            useEffect(() => {
                const initializeFirebase = () => {
                    try {
                        const services = window.firebase_services;
                        
                        const firebaseConfig = {
                            apiKey: "AIzaSyA1l7sXMfs-h2s6anKKp7JRlucgXx_HBas",
                            authDomain: "funconnect-app.firebaseapp.com",
                            projectId: "funconnect-app",
                            storageBucket: "funconnect-app.appspot.com",
                            messagingSenderId: "168452321402",
                            appId: "1:168452321402:web:91699021035e117ef4cbc3",
                            measurementId: "G-EJ9VR1F6VS"
                        };
                        
                        const app = services.initializeApp(firebaseConfig);
                        const auth = services.getAuth(app);
                        const db = services.getFirestore(app);
                        const allFbServices = { ...services, auth, db };
                        setFbServices(allFbServices);

                        // 認証状態の変更を監視
                        const unsubscribeAuth = services.onAuthStateChanged(auth, (currentUser) => {
                            setUser(currentUser);
                            setIsAuthReady(true);
                        });
                        
                        return () => unsubscribeAuth();
                    } catch (e) {
                        console.error("Firebase initialization failed:", e);
                        setError("アプリの起動に失敗しました。");
                        setIsAuthReady(true);
                        setIsDataReady(true);
                    }
                };
                
                if (window.firebase_services) {
                    initializeFirebase();
                } else {
                    document.addEventListener('firebase-ready', initializeFirebase, { once: true });
                }
            }, []);

            // --- 副作用フック (データ取得) ---
            useEffect(() => {
                if (!isAuthReady || !fbServices) return;

                if (!user) {
                    setIsDataReady(true);
                    return;
                }

                setIsDataReady(false);
                const { db, onSnapshot, collection, doc } = fbServices;
                const unsubscribers = [];
                let dataReadyCount = 0;
                const totalDataSources = 5;

                const checkAllDataReady = () => {
                    dataReadyCount++;
                    if (dataReadyCount >= totalDataSources) {
                        setIsDataReady(true);
                    }
                };
                const handleError = (error, source) => {
                    console.error(`Firestore listener error on ${source}:`, error);
                    setError(`${source}のデータの読み込みに失敗しました。`);
                    checkAllDataReady();
                };

                // 各コレクションからデータをリアルタイムで取得
                unsubscribers.push(onSnapshot(collection(db, "artists"), (snapshot) => { setArtists(snapshot.docs.map(d => ({ id: d.id, ...d.data() }))); checkAllDataReady(); },(e) => handleError(e, "アーティスト")));
                unsubscribers.push(onSnapshot(collection(db, "concerts"), (snapshot) => { const data = {}; snapshot.docs.forEach(d => { data[d.id] = d.data().schedule || []; }); setConcerts(data); checkAllDataReady(); },(e) => handleError(e, "公演情報")));
                unsubscribers.push(onSnapshot(collection(db, "hotels"), (snapshot) => { const data = {}; snapshot.docs.forEach(d => { data[d.id] = d.data().nearby || []; }); setHotels(data); checkAllDataReady(); },(e) => handleError(e, "ホテル情報")));
                unsubscribers.push(onSnapshot(doc(db, "system_defaults", "packingList"), (docSnap) => { setDefaultPackingList(docSnap.exists() ? docSnap.data().items : []); checkAllDataReady(); }, (e) => handleError(e, "持ち物リスト")));
                unsubscribers.push(onSnapshot(doc(db, "system_defaults", "mannersGuide"), (docSnap) => { setMannersGuide(docSnap.exists() ? docSnap.data() : null); checkAllDataReady(); }, (e) => handleError(e, "マナーガイド")));
                
                return () => { unsubscribers.forEach(unsub => unsub()); }
            }, [user, isAuthReady, fbServices]);

            // --- 認証処理 (ログイン・新規登録) ---
            const handleAuthAction = async (action, email, password) => {
                if (!fbServices) return;
                try {
                    setError('');
                    if (action === 'signup') {
                        // 新規登録のバリデーション
                        if (!/^[A-Za-z0-9@._-]+$/.test(email) || !/^[A-Za-z0-9]+$/.test(password)) {
                            throw new Error('IDとパスワードは英数字と一部の記号(@._-)のみ使用できます。');
                        }
                        const cred = await fbServices.createUserWithEmailAndPassword(fbServices.auth, email, password);
                        // 新規ユーザー用の持ち物リストを作成
                        await fbServices.setDoc(fbServices.doc(fbServices.db, 'packingLists', cred.user.uid), { items: defaultPackingList });
                    } else if (action === 'login') {
                        await fbServices.signInWithEmailAndPassword(fbServices.auth, email, password);
                    }
                } catch (err) {
                    console.error("Authentication error:", err.code, err.message);
                    // エラーコードに応じて、より具体的な日本語のエラーメッセージを設定
                    switch (err.code) {
                        case 'auth/email-already-in-use':
                            setError('このメールアドレスは既に使用されています。');
                            break;
                        case 'auth/user-disabled':
                            setError('このアカウントは無効化されています。管理者にお問い合わせください。');
                            break;
                        case 'auth/invalid-credential':
                             setError('ユーザー名（メールアドレス）またはパスワードが正しくありません。もう一度入力してください。');
                             break;
                        case 'auth/user-not-found': // 古いSDKとの互換性のために残す
                        case 'auth/wrong-password': // 古いSDKとの互換性のために残す
                             setError('ユーザー名（メールアドレス）またはパスワードが正しくありません。');
                             break;
                        case 'auth/invalid-email':
                            setError('有効なメールアドレスを入力してください。');
                            break;
                        default:
                            setError('処理に失敗しました。もう一度お試しください。');
                            break;
                    }
                }
            };

            // --- ログアウト処理 ---
            const handleLogout = () => {
                if(fbServices) {
                   fbServices.signOut(fbServices.auth);
                   navigate('splash');
                }
            };
            
            // --- 画面遷移処理 ---
            const navigate = (screenName, props = {}) => {
                setError('');
                setScreenProps(props);
                setScreen(screenName);
            };

            // --- 副作用フック (認証状態に応じた画面遷移) ---
            useEffect(() => {
                if (isAuthReady) {
                    setScreen(user ? 'menu' : 'splash');
                }
            }, [user, isAuthReady]);

            // --- ローディング画面 ---
            if (!isAuthReady || !isDataReady) {
                return ( <div className="loader-container"><div className="loader"></div><p style={{marginTop: '1.5rem', color: '#4b5563', fontSize: '1.1rem'}}>アプリのデータを準備中...</p></div> );
            }
            
            // --- レンダリング処理 ---
            const isHost = user && user.uid === HOST_UID;
            const commonProps = { navigate, fbServices, user, error, setError, artists, concerts, hotels, isHost, ...screenProps };
            const components = {
                splash: <SplashScreen {...commonProps} />,
                login: <LoginScreen {...commonProps} onLogin={(e, p) => handleAuthAction('login', e, p)} />,
                signup: <SignupScreen {...commonProps} onSignup={(e, p) => handleAuthAction('signup', e, p)} />,
                menu: <MainMenuScreen {...commonProps} onLogout={handleLogout} />,
                concertList: <ConcertListScreen {...commonProps} />,
                expeditionPlanner: <ExpeditionPlannerScreen {...commonProps} />,
                myPlans: <MyPlansScreen {...commonProps} />,
                packingList: <PackingListScreen {...commonProps} defaultPackingList={defaultPackingList} />,
                oshiSpot: <OshiSpotScreen {...commonProps} />,
                forum: <ForumScreen {...commonProps} />,
                chatRoomList: <ChatRoomListScreen {...commonProps} />,
                chat: <ChatScreen {...commonProps} />,
                manners: <MannersGuideScreen {...commonProps} mannersGuide={mannersGuide} />,
                routeMap: <RouteMapScreen {...commonProps} />,
                admin: <AdminScreen {...commonProps} />,
            };
            const screenToShow = user ? screen : (screen === 'signup' ? 'signup' : (screen === 'login' ? 'login' : 'splash'));
            const CurrentScreen = components[screenToShow] || (user ? components.menu : components.splash);
            const isHeaderVisible = screenToShow !== 'splash';

            return (
                <div className="min-h-screen flex flex-col">
                    {isHeaderVisible && user && ( <header className="w-full bg-pink-600 text-white shadow-md p-4 text-center sticky top-0 z-40"><h1 className="text-xl font-bold" style={{fontFamily: "'M PLUS Rounded 1c', sans-serif"}}>ENSEN</h1></header> )}
                    <main className="flex-grow"><div className="container mx-auto max-w-lg p-4">{CurrentScreen}</div></main>
                </div>
            );
        }

        // --- 画面コンポーネント ---

        function SplashScreen({ navigate }) {
            return (
                <div className="flex flex-col items-center justify-center h-[calc(100vh-4rem)] text-center">
                    <h1 className="text-5xl font-extrabold text-pink-600 mb-2" style={{fontFamily: "'M PLUS Rounded 1c', sans-serif"}}>
                        ENSEN
                    </h1>
                    <p className="text-gray-500 mb-12">遠征・推し活サポートアプリ</p>
                    <div className="w-full max-w-xs space-y-4">
                        <button onClick={() => navigate('login')} className="w-full flex items-center justify-center py-3 bg-pink-500 text-white font-bold rounded-lg shadow-md hover:bg-pink-600 transition-all transform hover:scale-105">
                           <LoginIcon /> ログイン
                        </button>
                        <button onClick={() => navigate('signup')} className="w-full flex items-center justify-center py-3 bg-white text-pink-500 font-bold rounded-lg shadow-md border border-pink-500 hover:bg-pink-50 transition-all transform hover:scale-105">
                           <UserAddIcon /> 新規登録
                        </button>
                    </div>
                </div>
            );
        }
        
        function AuthForm({ title, buttonText, onSubmit, children, error, isSignup = false, navigate }) {
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const emailInputRef = useRef(null); // メール入力欄への参照

            // エラーが発生した場合、メール入力欄にフォーカスを当てる
            useEffect(() => {
                if (error) {
                    emailInputRef.current?.focus();
                }
            }, [error]);

            const handleSubmit = (e) => { e.preventDefault(); onSubmit(email, password); };

            return (
                <div className="flex flex-col items-center justify-center pt-6">
                    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg">
                        <h2 className="text-2xl font-bold text-center text-pink-600">{title}</h2>
                        
                        {/* エラーメッセージのスタイルをより目立つように変更 */}
                        {error && (
                            <div className="p-3 text-center text-red-700 bg-red-100 border border-red-300 rounded-lg">
                                <p className="font-semibold">エラー</p>
                                <p className="text-sm">{error}</p>
                            </div>
                        )}
                        
                        <form onSubmit={handleSubmit} className="space-y-6">
                            <div>
                                <label className="text-sm font-bold text-gray-600 block">ユーザー名 (メールアドレス)</label>
                                <input 
                                    ref={emailInputRef}
                                    type="email" 
                                    value={email} 
                                    onChange={(e) => setEmail(e.target.value)} 
                                    className="w-full p-2 mt-1 border rounded-md focus:ring-2 focus:ring-pink-400 focus:border-transparent" 
                                    required 
                                />
                            </div>
                            <div>
                                <label className="text-sm font-bold text-gray-600 block">パスワード</label>
                                <input 
                                    type="password" 
                                    value={password} 
                                    onChange={(e) => setPassword(e.target.value)} 
                                    className="w-full p-2 mt-1 border rounded-md focus:ring-2 focus:ring-pink-400 focus:border-transparent" 
                                    required 
                                />
                                {isSignup && <p className="text-xs text-gray-500 mt-1">ID・パスワードは英数字と一部の記号(@._-)のみ</p>}
                            </div>
                            <button type="submit" className="w-full py-2 bg-pink-500 text-white font-semibold rounded-md hover:bg-pink-600 transition-colors">{buttonText}</button>
                        </form>
                        <div className="text-center">{children}</div>
                           <div className="text-center mt-4">
                                <button onClick={() => navigate('splash')} className="text-sm font-medium text-gray-600 hover:underline">
                                    ← タイトルに戻る
                                </button>
                            </div>
                    </div>
                </div>
            );
        }

        const LoginScreen = ({ onLogin, navigate, error }) => <AuthForm title="ログイン" buttonText="ログイン" onSubmit={onLogin} error={error} navigate={navigate}><p className="text-sm">アカウントをお持ちでない場合<button onClick={() => navigate('signup')} className="font-medium text-pink-500 hover:underline ml-1">新規登録</button></p></AuthForm>;
        const SignupScreen = ({ onSignup, navigate, error }) => <AuthForm title="新規会員登録" buttonText="登録する" onSubmit={onSignup} error={error} isSignup={true} navigate={navigate}><p className="text-center mt-4"><button onClick={() => navigate('login')} className="text-sm font-medium text-gray-600 hover:underline">ログイン画面に戻る</button></p></AuthForm>;
        const BackButton = ({ navigate, targetScreen, props = {} }) => <button onClick={() => navigate(targetScreen, props)} className="flex items-center text-gray-600 hover:text-pink-500 mb-4 font-semibold"><ArrowLeftIcon />戻る</button>;
        
        function MainMenuScreen({ navigate, onLogout, isHost }) {
          return (
            <div className="relative min-h-[calc(100vh-150px)]">
                <header className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-bold text-pink-600">メインメニュー</h2>
                    <button onClick={onLogout} className="flex items-center text-sm text-gray-600 hover:text-pink-500"><LogoutIcon /><span className="ml-1">ログアウト</span></button>
                </header>
                <div className="grid grid-cols-2 gap-4">
                    {[
                        { label: 'コンサートプラン作成', icon: <HomeIcon />, screen: 'concertList' },
                        { label: 'プラン確認', icon: <DocumentTextIcon />, screen: 'myPlans' },
                        { label: 'Fun交流掲示板', icon: <ChatBubbleLeftRightIcon />, screen: 'chatRoomList' },
                        { label: '持ち物リスト', icon: <ClipboardListIcon />, screen: 'packingList' },
                        { label: 'グルメガイド', icon: <ChatAlt2Icon />, screen: 'forum' },
                        { label: '推しスポット', icon: <SparklesIcon />, screen: 'oshiSpot' },
                        { label: '応援マナーガイド', icon: <InformationCircleIcon />, screen: 'manners' },
                        isHost && { label: '管理者設定', icon: <CogIcon />, screen: 'admin' },
                    ].filter(Boolean).map(item => (
                        <button key={item.label} onClick={() => navigate(item.screen, item.props)} className="bg-white p-2 rounded-xl shadow-md flex flex-col items-center justify-center aspect-square hover:shadow-lg hover:bg-pink-100 transition">
                            <div className="text-pink-500 mb-2">{item.icon}</div>
                            <span className="text-center text-sm font-semibold text-gray-700">{item.label}</span>
                        </button>
                    ))}
                </div>
            </div>
          );
        }
        
        function ConcertListScreen({ navigate, artists, concerts }) {
            const [selectedArtist, setSelectedArtist] = useState(null);
            const handleConcertSelect = (concert) => navigate('expeditionPlanner', { concert });
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">プランを作成するコンサートの選択</h2>
                    {!selectedArtist ? (
                        <div>
                            <h3 className="font-semibold text-gray-700 mb-2">アーティスト選択</h3>
                            <ul className="space-y-2">{artists.map(artist => <li key={artist.id}><button onClick={() => setSelectedArtist(artist)} className="w-full text-left p-3 bg-gray-50 rounded-lg hover:bg-pink-100">{artist.name}</button></li>)}</ul>
                        </div>
                    ) : (
                        <div>
                            <button onClick={() => setSelectedArtist(null)} className="text-sm text-pink-500 mb-2">← アーティスト選択に戻る</button>
                            <h3 className="font-semibold text-gray-700 mb-2">{selectedArtist.name} コンサート一覧</h3>
                            <ul className="space-y-2">{(concerts[selectedArtist.id] || []).map(concert => <li key={concert.id}><button onClick={() => handleConcertSelect(concert)} className="w-full text-left p-3 bg-gray-50 rounded-lg hover:bg-pink-100"><p className="font-bold">{concert.date} ({concert.day})</p><p className="text-sm">{concert.venue}</p></button></li>) || <p>公演情報がありません。</p>}</ul>
                        </div>
                    )}
                </div>
            );
        }
        
        function ExpeditionPlannerScreen({ navigate, concert, fbServices, user, hotels }) {
            if (!concert) { return (<div className="bg-white p-6 rounded-xl shadow-lg text-center"> <h2 className="text-xl font-bold text-red-500 mb-4">エラーが発生しました</h2> <p className="text-gray-600 mb-6">コンサート情報が正しく読み込めませんでした。</p> <button onClick={() => navigate('menu')} className="bg-pink-500 text-white font-semibold py-2 px-4 rounded-md hover:bg-pink-600">メインメニューに戻る</button> </div>); }
            const handleSavePlan = async (hotel) => {
                if (!fbServices || !user) return;
                try {
                    const planData = { concert, hotel, createdAt: fbServices.serverTimestamp() };
                    const userPlansCollection = fbServices.collection(fbServices.db, 'userPlans', user.uid, 'plans');
                    await fbServices.addDoc(userPlansCollection, planData);
                    navigate('myPlans');
                } catch (error) { console.error("Failed to save plan: ", error); }
            };
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <BackButton navigate={navigate} targetScreen="concertList" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">コンサートプラン作成</h2>
                    <div className="bg-pink-50 p-4 rounded-lg mb-4 space-y-2">
                        <h3 className="font-bold text-gray-800">選択中のコンサート</h3>
                        <p><span className="font-semibold">日程:</span> {concert.date} ({concert.day}) {concert.start}~</p>
                        <p><span className="font-semibold">会場:</span> {concert.venue}</p>
                    </div>
                    <h3 className="font-semibold text-gray-700 mb-2">会場周辺のホテル情報</h3>
                    {(hotels[concert.venue] || []).length > 0 ? (
                        <ul className="space-y-3">
                            {(hotels[concert.venue] || []).map(hotel => (
                                <li key={hotel.id} className="bg-gray-50 p-3 rounded-lg flex justify-between items-center">
                                    <div>
                                        <p className="font-bold">{hotel.name}</p>
                                        <p className="text-sm text-gray-600">{hotel.desc}</p>
                                        <p className="text-sm font-semibold text-pink-500">{hotel.price}</p>
                                        <a href={hotel.url} target="_blank" rel="noopener noreferrer" className="text-sm text-blue-400 hover:underline">ホテルHP閲覧<ExternalLinkIcon/></a>
                                    </div>
                                    <button onClick={() => handleSavePlan(hotel)} className="bg-pink-500 text-white text-sm px-3 py-1 rounded-full hover:bg-pink-600 flex items-center shrink-0">保存</button>
                                </li>
                            ))}
                        </ul>
                    ) : <p className="text-gray-500">この会場周辺のホテル情報はありません。</p>}
                </div>
            );
        }
        
        function MyPlansScreen({ navigate, fbServices, user }) {
            const [plans, setPlans] = useState([]);
            const [showConfirmModal, setShowConfirmModal] = useState(false);
            const [planToDelete, setPlanToDelete] = useState(null);
            useEffect(() => {
                if (!fbServices || !user) return;
                const q = fbServices.query(fbServices.collection(fbServices.db, 'userPlans', user.uid, 'plans'), fbServices.orderBy('createdAt', 'desc'));
                const unsubscribe = fbServices.onSnapshot(q, (snapshot) => { setPlans(snapshot.docs.map(d => ({ id: d.id, ...d.data() }))); });
                return () => unsubscribe();
            }, [fbServices, user]);
            const requestDeletePlan = (planId) => { setPlanToDelete(planId); setShowConfirmModal(true); };
            const confirmDeletePlan = async () => {
                if (!planToDelete || !fbServices || !user) return;
                try { await fbServices.deleteDoc(fbServices.doc(fbServices.db, 'userPlans', user.uid, 'plans', planToDelete)); } catch(e) { console.error("Failed to delete plan:", e); }
                setShowConfirmModal(false); setPlanToDelete(null);
            };
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <ConfirmModal show={showConfirmModal} message="このプランを削除しますか？" onConfirm={confirmDeletePlan} onCancel={() => setShowConfirmModal(false)} />
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">作成したプラン一覧</h2>
                    {plans.length > 0 ? (
                        <ul className="space-y-4">
                            {plans.map(plan => (
                                <li key={plan.id} className="bg-gray-50 p-4 rounded-lg">
                                    <div className="flex justify-between items-start">
                                        <div className="flex-grow">
                                            <p className="font-bold text-pink-700">{plan.concert.date} {plan.concert.venue}</p>
                                            <div className="mt-2 pt-2 border-t">
                                                <p className="font-semibold">宿泊先: {plan.hotel.name}</p>
                                                <p className="text-sm text-gray-600">{plan.hotel.desc} - {plan.hotel.price}</p>
                                            </div>
                                        </div>
                                        <button onClick={() => requestDeletePlan(plan.id)} className="text-gray-400 hover:text-red-500 ml-4 shrink-0"><TrashIcon /></button>
                                    </div>
                                    <div className="mt-3 text-right"> <button onClick={() => navigate('routeMap', { plan: plan })} className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-full shadow-sm text-white bg-pink-500 hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500"> <MapIcon /> <span className="ml-2">ルート表示</span> </button> </div>
                                </li>
                            ))}
                        </ul>
                    ) : <p className="text-gray-500 mt-4">保存されたプランはありません。「コンサートプラン作成」から、新しいプランを作成しましょう！</p>}
                </div>
            );
        }

        function PackingListScreen({ fbServices, user, navigate, defaultPackingList }) {
            const [items, setItems] = useState([]);
            const [newItemText, setNewItemText] = useState('');
            useEffect(() => {
                if (!fbServices || !user) return;
                const docRef = fbServices.doc(fbServices.db, 'packingLists', user.uid);
                const unsubscribe = fbServices.onSnapshot(docRef, (docSnap) => {
                    if (docSnap.exists() && docSnap.data().items) {
                        setItems(docSnap.data().items);
                    } else {
                        setItems(defaultPackingList);
                    }
                }, e => console.error(e));
                return unsubscribe;
            }, [fbServices, user, defaultPackingList]);

            const updateFirestore = (updatedItems) => { if (!fbServices || !user) return; fbServices.setDoc(fbServices.doc(fbServices.db, 'packingLists', user.uid), { items: updatedItems }).catch(e => console.error(e)); };
            const handleAddItem = (e) => { e.preventDefault(); if(newItemText.trim()){ updateFirestore([...items, { id: Date.now(), text: newItemText, checked: false }]); setNewItemText(''); } };
            const handleDeleteItem = (id) => updateFirestore(items.filter(i => i.id !== id));
            const toggleItem = (id) => updateFirestore(items.map(i => i.id === id ? { ...i, checked: !i.checked } : i));

            return (<div className="bg-white p-6 rounded-xl shadow-lg"><BackButton navigate={navigate} targetScreen="menu" /><h2 className="text-xl font-bold text-pink-600 mb-4">持ち物リスト</h2><form onSubmit={handleAddItem} className="flex gap-2 mb-4"><input type="text" value={newItemText} onChange={(e) => setNewItemText(e.target.value)} placeholder="新しい項目の追加" className="flex-grow p-2 border rounded-md" /><button type="submit" className="bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600 flex items-center shrink-0">追加<PlusIcon/></button></form><ul className="space-y-2">{items.map(item => <li key={item.id} className="flex items-center justify-between bg-gray-50 p-3 rounded-lg"><label className="flex items-center flex-grow cursor-pointer"><input type="checkbox" checked={item.checked} onChange={() => toggleItem(item.id)} className="h-5 w-5 rounded text-pink-600" /><span className={`ml-3 text-gray-700 ${item.checked ? 'line-through text-gray-400' : ''}`}>{item.text}</span></label><button onClick={() => handleDeleteItem(item.id)} className="text-gray-400 hover:text-red-500"><TrashIcon /></button></li>)}</ul></div>);
        }

        function ChatRoomListScreen({ navigate, artists }) {
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">Fun交流掲示板 - ルーム選択</h2>
                    <ul className="space-y-3">
                        <li>
                            <button onClick={() => navigate('chat', { roomId: 'general', roomName: '全体チャット' })} className="w-full text-left p-4 bg-pink-100 rounded-lg hover:bg-pink-200 transition font-semibold text-pink-800">
                                💬 全体チャット
                            </button>
                        </li>
                        {artists.map(artist => (
                               <li key={artist.id}>
                                   <button onClick={() => navigate('chat', { roomId: artist.id, roomName: artist.name })} className="w-full text-left p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition">
                                       {artist.name}
                                   </button>
                               </li>
                        ))}
                    </ul>
                </div>
            );
        }

        function ChatScreen({ fbServices, user, navigate, roomId, roomName, isHost }) {
            const [messages, setMessages] = useState([]);
            const [newMessage, setNewMessage] = useState("");
            const chatEndRef = useRef(null);
            const [showConfirmModal, setShowConfirmModal] = useState(false);
            const [messageToDelete, setMessageToDelete] = useState(null);
            
            useEffect(() => {
                if (!fbServices || !user || !roomId) return;
                const messagesCollection = fbServices.collection(fbServices.db, "chatRooms", roomId, "messages");
                const q = fbServices.query(messagesCollection, fbServices.orderBy("createdAt"));
                const unsubscribe = fbServices.onSnapshot(q, 
                    (snapshot) => setMessages(snapshot.docs.map(d => ({ id: d.id, ...d.data() }))), 
                    (error) => console.error("Chat data fetch error:", error)
                );
                return unsubscribe;
            }, [fbServices, user, roomId]);

            useEffect(() => { chatEndRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages]);

            const handleSendMessage = async (e) => {
                e.preventDefault();
                if (newMessage.trim() === "" || !user || !roomId) return;
                try {
                    const messagesCollection = fbServices.collection(fbServices.db, "chatRooms", roomId, "messages");
                    await fbServices.addDoc(messagesCollection, { text: newMessage, authorEmail: user.email, authorUid: user.uid, createdAt: fbServices.serverTimestamp() });
                    setNewMessage("");
                } catch(e) { console.error("Failed to send message:", e); }
            };

            const requestDeleteMessage = (msgId) => { setMessageToDelete(msgId); setShowConfirmModal(true); };
            const confirmDeleteMessage = async () => {
                if (!messageToDelete) return;
                try {
                    await fbServices.deleteDoc(fbServices.doc(fbServices.db, "chatRooms", roomId, "messages", messageToDelete));
                } catch (e) { console.error("Failed to delete message:", e); }
                setShowConfirmModal(false); setMessageToDelete(null);
            };
            
            if (!roomId) { return <div className="p-4 text-center">チャットルームが選択されていません。</div> }

            return (
                <div className="bg-white p-6 rounded-xl shadow-lg flex flex-col h-[calc(100vh-120px)]">
                    <ConfirmModal show={showConfirmModal} message="このメッセージを削除しますか？" onConfirm={confirmDeleteMessage} onCancel={() => setShowConfirmModal(false)} />
                    <div className="flex-shrink-0">
                        <BackButton navigate={navigate} targetScreen="chatRoomList" />
                        <h2 className="text-xl font-bold text-pink-600 mb-4 truncate">{roomName}</h2>
                    </div>
                    <div className="flex-grow overflow-y-auto mb-4 p-2 bg-pink-50 rounded-lg">
                        {messages.map(msg => {
                            const isMe = msg.authorUid === user.uid;
                            return (
                                <div key={msg.id} className={`flex items-end gap-2 my-2 ${isMe ? 'flex-row-reverse' : ''}`}>
                                    {isHost && <button onClick={() => requestDeleteMessage(msg.id)} className="text-gray-400 hover:text-red-500 shrink-0 pb-1"><TrashIcon/></button>}
                                    <div className={`flex flex-col ${isMe ? 'items-end' : 'items-start'}`}>
                                        <div className="text-xs text-gray-500 px-1 mb-1">
                                            <span>{msg.authorEmail.split('@')[0]}</span>
                                            <span className="ml-2">{formatTimestamp(msg.createdAt)}</span>
                                        </div>
                                        <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-xl ${isMe ? 'bg-pink-200' : 'bg-gray-200'}`}>
                                            <p className="text-gray-800" style={{overflowWrap: 'break-word'}}>{msg.text}</p>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                        <div ref={chatEndRef} />
                    </div>
                    <form onSubmit={handleSendMessage} className="flex-shrink-0 flex gap-2">
                        <input type="text" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder="メッセージを入力..." className="flex-grow p-2 border rounded-md" />
                        <button type="submit" className="bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600 shrink-0">送信</button>
                    </form>
                </div>
            );
        }
        
        function MannersGuideScreen({ navigate, mannersGuide, isHost, fbServices }) {
            const [isEditing, setIsEditing] = useState(false);
            const [editedGuide, setEditedGuide] = useState(mannersGuide);

            useEffect(() => { setEditedGuide(mannersGuide); }, [mannersGuide]);
            
            const handleSave = async () => {
                if(!fbServices || !editedGuide) return;
                try {
                    await fbServices.setDoc(fbServices.doc(fbServices.db, "system_defaults", "mannersGuide"), editedGuide);
                    setIsEditing(false);
                } catch (e) { console.error("Failed to save manners guide:", e); alert("保存に失敗しました。"); }
            };

            if (!editedGuide) { return ( <div className="bg-white p-6 rounded-xl shadow-lg text-center"><p>マナーガイドを読み込み中...</p></div> ); }

            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <div className="flex justify-between items-center mb-4">
                        <h2 className="text-xl font-bold text-pink-600">応援マナーガイド</h2>
                        {isHost && !isEditing && <button onClick={() => setIsEditing(true)} className="bg-gray-200 text-sm px-3 py-1 rounded-md hover:bg-gray-300">編集</button>}
                    </div>

                    {isEditing ? (
                        <div className="space-y-4">
                            <div><label className="font-bold text-gray-700">タイトル</label><input type="text" value={editedGuide.title} onChange={e => setEditedGuide({...editedGuide, title: e.target.value})} className="w-full p-2 border rounded-md mt-1"/></div>
                            <div><label className="font-bold text-gray-700">導入文</label><textarea value={editedGuide.introduction} onChange={e => setEditedGuide({...editedGuide, introduction: e.target.value})} className="w-full p-2 border rounded-md mt-1" rows="2"></textarea></div>
                            <div><label className="font-bold text-gray-700">マナー項目 (1行1項目)</label><textarea value={editedGuide.items.join('\n')} onChange={e => setEditedGuide({...editedGuide, items: e.target.value.split('\n')})} className="w-full p-2 border rounded-md mt-1" rows="10"></textarea></div>
                             <div><label className="font-bold text-gray-700">結びの文</label><input type="text" value={editedGuide.conclusion} onChange={e => setEditedGuide({...editedGuide, conclusion: e.target.value})} className="w-full p-2 border rounded-md mt-1"/></div>
                            <div className="mt-4 flex gap-4"><button onClick={handleSave} className="bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600">保存</button><button onClick={() => { setIsEditing(false); setEditedGuide(mannersGuide); }} className="bg-gray-200 px-4 py-2 rounded-md hover:bg-gray-300">キャンセル</button></div>
                        </div>
                    ) : (
                        <div className="space-y-4 text-gray-800">
                           <h3 className="text-lg font-bold text-pink-700">{editedGuide.title}</h3>
                           <p className="whitespace-pre-wrap">{editedGuide.introduction}</p>
                           <ul className="list-disc list-inside space-y-2 bg-pink-50 p-4 rounded-lg">{editedGuide.items && editedGuide.items.map((item, index) => <li key={index}>{item}</li>)}</ul>
                           <p className="whitespace-pre-wrap">{editedGuide.conclusion}</p>
                        </div>
                    )}
                </div>
            );
        }

        function DataBoardScreen({ fbServices, user, navigate, collectionName, title, fieldNames, isHost }) {
            const [posts, setPosts] = useState([]);
            const [field1, setField1] = useState('');
            const [field2, setField2] = useState('');
            const [url, setUrl] = useState('');
            const [showConfirmModal, setShowConfirmModal] = useState(false);
            const [postToDelete, setPostToDelete] = useState(null);
            
            useEffect(() => {
                if (!fbServices || !user) return;
                const q = fbServices.query(fbServices.collection(fbServices.db, collectionName), fbServices.orderBy('createdAt', 'desc'));
                const unsubscribe = fbServices.onSnapshot(q, (snapshot) => setPosts(snapshot.docs.map(d => ({ id: d.id, ...d.data() }))), (error) => console.error(`Error fetching from ${collectionName}:`, error));
                return unsubscribe;
            }, [fbServices, user, collectionName]);

            const handleSubmit = async (e) => {
                e.preventDefault();
                if (field1.trim() === '' || field2.trim() === '' || !user) return;
                try {
                    const postData = { title: field1, content: field2, url: url.trim(), authorEmail: user.email, authorUid: user.uid, createdAt: fbServices.serverTimestamp() };
                    await fbServices.addDoc(fbServices.collection(fbServices.db, collectionName), postData);
                    setField1(''); setField2(''); setUrl('');
                } catch(e) { console.error("Post failed:", e); }
            };
            const requestDelete = (postId) => { setPostToDelete(postId); setShowConfirmModal(true); };
            const confirmDelete = async () => {
                if (!postToDelete || !fbServices || !user) return;
                try { await fbServices.deleteDoc(fbServices.doc(fbServices.db, collectionName, postToDelete)); } catch(e) { console.error("Deletion failed:", e); }
                setShowConfirmModal(false); setPostToDelete(null);
            };
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <ConfirmModal show={showConfirmModal} message="この投稿を削除しますか？" onConfirm={confirmDelete} onCancel={() => setShowConfirmModal(false)} />
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">{title}</h2>
                    <form onSubmit={handleSubmit} className="mb-6 p-4 bg-pink-50 rounded-lg space-y-3">
                        <h3 className="font-semibold">新規投稿</h3>
                        <input type="text" value={field1} onChange={e => setField1(e.target.value)} placeholder={fieldNames.field1} className="w-full p-2 border rounded-md" required />
                        <textarea value={field2} onChange={e => setField2(e.target.value)} placeholder={fieldNames.field2} className="w-full p-2 border rounded-md" rows="3" required></textarea>
                        <input type="url" value={url} onChange={e => setUrl(e.target.value)} placeholder={fieldNames.url} className="w-full p-2 border rounded-md" />
                        <button type="submit" className="w-full py-2 bg-pink-500 text-white font-semibold rounded-md hover:bg-pink-600">投稿する</button>
                    </form>
                    <div className="space-y-4">{posts.map(post => 
                        <div key={post.id} className="p-4 bg-gray-50 rounded-lg relative">
                            <div className="flex justify-between items-start">
                                <div className="flex-grow pr-8">
                                    <h3 className="font-bold text-pink-700">{post.title}</h3>
                                    <p className="text-gray-800 my-1 whitespace-pre-wrap">{post.content}</p>
                                    {post.url && (<a href={post.url} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline text-sm break-all"> 参考リンク <ExternalLinkIcon /></a>)}
                                    <div className="text-xs text-gray-500 mt-2"> <span>{post.authorEmail.split('@')[0]}</span> <span className="ml-2">{formatTimestamp(post.createdAt)}</span> </div>
                                </div>
                                {(post.authorUid === user?.uid || isHost) && (<button onClick={() => requestDelete(post.id)} className="text-gray-400 hover:text-red-500 shrink-0"><TrashIcon /></button>)}
                            </div>
                        </div>
                    )}</div>
                </div>
            );
        }
        const OshiSpotScreen = (props) => <DataBoardScreen {...props} collectionName="oshiSpots" title="推しスポット情報" fieldNames={{field1: 'スポット名（例：〇〇カフェ）', field2: '説明（例：コラボメニューがありました！）', url: '参考URL（任意）'}} />;
        const ForumScreen = (props) => <DataBoardScreen {...props} collectionName="forum" title="情報交換・飲食情報掲示板" fieldNames={{field1: 'タイトル', field2: '内容（例：会場近くのおすすめランチ）', url: '参考URL（任意）'}} />;
        
        function RouteMapScreen({ navigate, plan }) {
            const mapRef = useRef(null);
            const mapInstanceRef = useRef(null);
            const directionsRendererRef = useRef(null);
            const directionsServiceRef = useRef(null);
            const [mapMessage, setMapMessage] = useState('地図の初期化待機中...');
            const [userOrigin, setUserOrigin] = useState(plan?.hotel?.name || '');
            const [travelMode, setTravelMode] = useState('TRANSIT');
            const [arrivalTime, setArrivalTime] = useState('');
            const [duration, setDuration] = useState('');
            const [googleMapsUrl, setGoogleMapsUrl] = useState('');

            const generateGoogleMapsUrl = (origin, destination, mode, time) => {
                const encodedOrigin = encodeURIComponent(origin);
                const encodedDestination = encodeURIComponent(destination);
                if (mode === 'TRANSIT' && time) {
                    const arrivalDate = new Date(time);
                    if (!isNaN(arrivalDate)) {
                        const arrivalTimestamp = Math.floor(arrivalDate.getTime() / 1000);
                        return `https://www.google.com/maps/dir/?api=1&origin=${encodedOrigin}&destination=${encodedDestination}&travelmode=transit&transit_options=arrival_time:${arrivalTimestamp}`;
                    }
                }
                const travelModeParam = mode.toLowerCase();
                return `https://www.google.com/maps/dir/?api=1&origin=${encodedOrigin}&destination=${encodedDestination}&travelmode=${travelModeParam}`;
            };
            
            useEffect(() => {
                if (!plan || mapInstanceRef.current) return;
                if (!window.google?.maps) { setMapMessage("【エラー】Google Maps APIの読み込みに失敗しました。"); return; }
                
                directionsServiceRef.current = new window.google.maps.DirectionsService();
                directionsRendererRef.current = new window.google.maps.DirectionsRenderer({ panel: document.getElementById('directions-panel') });
                
                const startTime = new Date(`${plan.concert.date}T${plan.concert.start}`);
                if(!isNaN(startTime)) {
                    startTime.setMinutes(startTime.getMinutes() - 30);
                    const formattedArrivalTime = formatDateForInput(startTime);
                    setArrivalTime(formattedArrivalTime);
                    initiateRouteSearch(formattedArrivalTime);
                }
                
                const geocoder = new window.google.maps.Geocoder();
                geocoder.geocode({ 'address': plan.concert.venue }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        const venueLocation = results[0].geometry.location;
                        const map = new window.google.maps.Map(mapRef.current, { zoom: 15, center: venueLocation, mapTypeControl: false, });
                        mapInstanceRef.current = map;
                        directionsRendererRef.current.setMap(map);
                        new window.google.maps.Marker({ position: venueLocation, map: map, title: plan.concert.venue });
                    } else { setMapMessage(`会場の場所を特定できませんでした (理由: ${status})`); }
                });
            }, [plan]);

            const displayRoute = (request, fallbackToWalking = false) => {
                if (!directionsServiceRef.current) return;
                setMapMessage('ルートを検索中...');
                directionsServiceRef.current.route(request, (result, status) => {
                    if (status === 'OK') {
                        setMapMessage('');
                        setDuration(result.routes[0]?.legs[0]?.duration?.text || '');
                        directionsRendererRef.current.setDirections(result);
                        const currentMode = request.travelMode;
                        setTravelMode(currentMode);
                        setGoogleMapsUrl(generateGoogleMapsUrl(request.origin, request.destination, currentMode, request.transitOptions?.arrivalTime));
                    } else {
                        if (fallbackToWalking && request.travelMode === 'TRANSIT') {
                            setMapMessage('公共交通機関のルートが見つかりません。徒歩ルートを検索します...');
                            const walkingRequest = { ...request, travelMode: 'WALKING' };
                            delete walkingRequest.transitOptions;
                            displayRoute(walkingRequest, false); 
                        } else {
                            console.error(`Route search error: ${status}`, request);
                            let friendlyMessage = 'ルートが見つかりませんでした。場所や交通手段を変えてお試しください。';
                            setMapMessage(friendlyMessage); setDuration('');
                            if(directionsRendererRef.current) directionsRendererRef.current.setDirections({routes: []});
                            setGoogleMapsUrl(generateGoogleMapsUrl(request.origin, request.destination, request.travelMode, null));
                        }
                    }
                });
            };
            
            const initiateRouteSearch = (time) => {
                const initialRequest = { origin: userOrigin, destination: plan.concert.venue, travelMode: 'TRANSIT', transitOptions: { arrivalTime: new Date(time) } };
                displayRoute(initialRequest, true);
            };
            const handleSearch = (e) => {
                e.preventDefault();
                if (!userOrigin.trim()) { setMapMessage('出発地を入力してください。'); return; }
                const request = { origin: userOrigin, destination: plan.concert.venue, travelMode: travelMode, };
                if (travelMode === 'TRANSIT' && arrivalTime) {
                    const arrivalDate = new Date(arrivalTime);
                    if (arrivalDate < new Date()) { 
                        setMapMessage('過去の日時では公共交通機関のルート検索はできません。'); 
                        setDuration(''); 
                        if(directionsRendererRef.current) directionsRendererRef.current.setDirections({routes: []});
                        setGoogleMapsUrl(generateGoogleMapsUrl(userOrigin, plan.concert.venue, travelMode, null));
                        return; 
                    }
                    request.transitOptions = { arrivalTime: arrivalDate };
                }
                displayRoute(request, true);
            };
            
            const formatDateForInput = (date) => { const pad = (num) => num.toString().padStart(2, '0'); return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`; };
            
            return (
                <div className="bg-white p-6 rounded-xl shadow-lg">
                    <BackButton navigate={navigate} targetScreen="myPlans" />
                    <h2 className="text-xl font-bold text-pink-600 mb-2">会場へのルート</h2>
                    {plan && <p className="text-gray-600 mb-4">目的地: <span className="font-semibold">{plan.concert.venue}</span></p>}
                    <form onSubmit={handleSearch} className="space-y-3 mb-3">
                        <div> <label className="text-sm font-bold text-gray-600 block mb-1">出発地</label> <input type="text" value={userOrigin} onChange={(e) => setUserOrigin(e.target.value)} className="p-2 border rounded-md w-full" /> </div>
                        <div> <label className="text-sm font-bold text-gray-600 block mb-1">到着希望時刻 (公共交通機関)</label> <input type="datetime-local" value={arrivalTime} onChange={e => setArrivalTime(e.target.value)} className="p-2 border rounded-md w-full text-gray-600" /> <p className="text-xs text-gray-500 mt-1">※過去や遠い未来の日付での時刻指定検索は、公共交通機関のデータがなく、ルートが見つからない場合があります。</p> </div>
                        <div className="flex justify-center gap-2 pt-1"> <button type="button" onClick={() => setTravelMode('TRANSIT')} className={`px-3 py-1 rounded-full text-sm ${travelMode === 'TRANSIT' ? 'bg-pink-500 text-white shadow' : 'bg-gray-200'}`}>公共交通機関</button> <button type="button" onClick={() => setTravelMode('WALKING')} className={`px-3 py-1 rounded-full text-sm ${travelMode === 'WALKING' ? 'bg-pink-500 text-white shadow' : 'bg-gray-200'}`}>徒歩</button> <button type="button" onClick={() => setTravelMode('DRIVING')} className={`px-3 py-1 rounded-full text-sm ${travelMode === 'DRIVING' ? 'bg-pink-500 text-white shadow' : 'bg-gray-200'}`}>車</button> </div>
                        <button type="submit" className="w-full bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600 shrink-0 font-semibold">この条件で検索</button>
                    </form>
                    <div className="map-container relative bg-gray-200 mt-4"> <div ref={mapRef} style={{ width: '100%', height: '100%' }}></div> </div>
                    <div className="mt-4">
                        <div className="flex justify-between items-center mb-2"><h3 className="text-lg font-bold text-pink-600">詳細ルート</h3>{duration && <p className="font-semibold text-gray-700">所要時間: <span className="text-pink-500">{duration}</span></p>}</div>
                        {googleMapsUrl && (<div className="text-center mb-3"><a href={googleMapsUrl} target="_blank" rel="noopener noreferrer" className="inline-flex items-center justify-center px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition-all">Googleマップで開く <ExternalLinkIcon /></a></div>)}
                        {mapMessage && (<div className={`p-3 text-center text-sm rounded-md mb-2 ${mapMessage.includes('エラー') || mapMessage.includes('見つかりませんでした') ? 'bg-red-100 text-red-800' : 'bg-pink-100 text-pink-800'}`}> {mapMessage} </div>)}
                        <div id="directions-panel"></div>
                    </div>
                </div>
            );
        }

        function AdminScreen({ navigate, fbServices, artists, concerts, hotels }) {
            const { db, doc, setDoc, deleteDoc, updateDoc, arrayUnion, arrayRemove } = fbServices;
            const [showConfirm, setShowConfirm] = useState(false);
            const [confirmAction, setConfirmAction] = useState(null);

            const requestConfirm = (action) => { setConfirmAction(() => action); setShowConfirm(true); };
            const executeConfirm = () => { if (confirmAction) confirmAction(); setShowConfirm(false); setConfirmAction(null); };
            
            const [newArtistName, setNewArtistName] = useState('');
            const handleAddArtist = async (e) => { e.preventDefault(); if (!newArtistName.trim()) return; const newId = newArtistName.toLowerCase().replace(/\s+/g, '-'); await setDoc(doc(db, "artists", newId), { id: newId, name: newArtistName }); await setDoc(doc(db, "concerts", newId), { schedule: [] }); setNewArtistName(''); };
            const handleDeleteArtist = (artistId) => requestConfirm(async () => { await deleteDoc(doc(db, "artists", artistId)); await deleteDoc(doc(db, "concerts", artistId)); });

            const [concertArtistId, setConcertArtistId] = useState('');
            const [concertVenue, setConcertVenue] = useState('');
            const [concertDate, setConcertDate] = useState('');
            const [concertDay, setConcertDay] = useState('');
            const [concertStart, setConcertStart] = useState('');

            const handleAddConcert = async (e) => {
                e.preventDefault(); if (!concertArtistId || !concertVenue.trim() || !concertDate.trim()) return;
                const newConcert = { id: `${concertDate}-${concertVenue.replace(/\s/g, "")}`, venue: concertVenue, date: concertDate, day: concertDay, start: concertStart };
                await updateDoc(doc(db, "concerts", concertArtistId), { schedule: arrayUnion(newConcert) });
                setConcertVenue(''); setConcertDate(''); setConcertDay(''); setConcertStart('');
            };
            const handleDeleteConcert = (artistId, concert) => requestConfirm(async () => { await updateDoc(doc(db, "concerts", artistId), { schedule: arrayRemove(concert) }); });

            const [hotelVenueName, setHotelVenueName] = useState('');
            const [hotelName, setHotelName] = useState('');
            const [hotelDesc, setHotelDesc] = useState('');
            const [hotelPrice, setHotelPrice] = useState('');
            const [hotelUrl, setHotelUrl] = useState('');

            const handleAddHotel = async (e) => {
                e.preventDefault(); if (!hotelVenueName.trim() || !hotelName.trim()) return;
                const newHotel = { id: Date.now(), name: hotelName, desc: hotelDesc, price: hotelPrice, url: hotelUrl };
                await setDoc(doc(db, "hotels", hotelVenueName), { nearby: arrayUnion(newHotel) }, { merge: true });
                setHotelName(''); setHotelDesc(''); setHotelPrice(''); setHotelUrl('');
            };
            const handleDeleteHotel = (venue, hotel) => requestConfirm(async () => { await updateDoc(doc(db, "hotels", venue), { nearby: arrayRemove(hotel) }); });

            return (
                <div className="bg-white p-6 rounded-xl shadow-lg space-y-8">
                    <ConfirmModal show={showConfirm} message="この操作を本当に実行しますか？取り消せません。" onConfirm={executeConfirm} onCancel={() => setShowConfirm(false)} />
                    <BackButton navigate={navigate} targetScreen="menu" />
                    <h2 className="text-xl font-bold text-pink-600 mb-4">管理者設定</h2>
                    <section><h3 className="text-lg font-bold text-gray-700 border-b-2 border-pink-200 pb-2 mb-4">アーティスト管理</h3><form onSubmit={handleAddArtist} className="flex gap-2 mb-4"><input value={newArtistName} onChange={e => setNewArtistName(e.target.value)} placeholder="新しいアーティスト名" className="flex-grow p-2 border rounded-md" /><button type="submit" className="bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600 shrink-0">追加</button></form><ul className="space-y-2">{artists.map(artist => <li key={artist.id} className="flex justify-between items-center p-2 bg-gray-50 rounded-md"><span>{artist.name}</span><button onClick={() => handleDeleteArtist(artist.id)} className="text-red-500 hover:text-red-700"><TrashIcon/></button></li>)}</ul></section>
                    <section><h3 className="text-lg font-bold text-gray-700 border-b-2 border-pink-200 pb-2 mb-4">公演情報管理</h3><form onSubmit={handleAddConcert} className="space-y-2 p-3 bg-gray-50 rounded-md mb-4"><select value={concertArtistId} onChange={e => setConcertArtistId(e.target.value)} className="w-full p-2 border rounded-md" required><option value="">アーティストを選択</option>{artists.map(a => <option key={a.id} value={a.id}>{a.name}</option>)}</select><input value={concertDate} onChange={e => setConcertDate(e.target.value)} placeholder="日付 (例: 2025/08/01)" className="w-full p-2 border rounded-md" required /><input value={concertDay} onChange={e => setConcertDay(e.target.value)} placeholder="曜日 (例: 金)" className="w-full p-2 border rounded-md" /><input value={concertVenue} onChange={e => setConcertVenue(e.target.value)} placeholder="会場名" className="w-full p-2 border rounded-md" required /><input value={concertStart} onChange={e => setConcertStart(e.target.value)} placeholder="開演時間 (例: 18:00)" className="w-full p-2 border rounded-md" /><button type="submit" className="w-full bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600">公演追加</button></form><div className="space-y-4">{Object.entries(concerts).map(([artistId, schedule]) => <div key={artistId}><h4 className="font-semibold text-pink-700">{artists.find(a=>a.id===artistId)?.name}</h4><ul className="space-y-1 mt-1">{schedule.map(c => <li key={c.id} className="text-sm flex justify-between items-center p-2 bg-gray-50 rounded-md"><span>{c.date} {c.venue}</span><button onClick={() => handleDeleteConcert(artistId, c)} className="text-red-500 hover:text-red-700"><TrashIcon/></button></li>)}</ul></div>)}</div></section>
                    <section><h3 className="text-lg font-bold text-gray-700 border-b-2 border-pink-200 pb-2 mb-4">ホテル情報管理</h3><form onSubmit={handleAddHotel} className="space-y-2 p-3 bg-gray-50 rounded-md mb-4"><input value={hotelVenueName} onChange={e => setHotelVenueName(e.target.value)} placeholder="関連付ける会場名" className="w-full p-2 border rounded-md" required /><input value={hotelName} onChange={e => setHotelName(e.target.value)} placeholder="ホテル名" className="w-full p-2 border rounded-md" required /><input value={hotelDesc} onChange={e => setHotelDesc(e.target.value)} placeholder="説明 (例: 会場まで徒歩5分)" className="w-full p-2 border rounded-md" /><input value={hotelPrice} onChange={e => setHotelPrice(e.target.value)} placeholder="価格帯 (例: 1泊¥10,000〜)" className="w-full p-2 border rounded-md" /><input type="url" value={hotelUrl} onChange={e => setHotelUrl(e.target.value)} placeholder="ホテルURL" className="w-full p-2 border rounded-md" /><button type="submit" className="w-full bg-pink-500 text-white px-4 py-2 rounded-md hover:bg-pink-600">ホテル追加</button></form><div className="space-y-4">{Object.entries(hotels).map(([venue, nearby]) => <div key={venue}><h4 className="font-semibold text-pink-700">{venue}</h4><ul className="space-y-1 mt-1">{nearby.map(h => <li key={h.id} className="text-sm flex justify-between items-center p-2 bg-gray-50 rounded-md"><span>{h.name}</span><button onClick={() => handleDeleteHotel(venue, h)} className="text-red-500 hover:text-red-700"><TrashIcon/></button></li>)}</ul></div>)}</div></section>
                </div>
            );
        }
        
        // Reactアプリケーションを#root要素にレンダリング
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
